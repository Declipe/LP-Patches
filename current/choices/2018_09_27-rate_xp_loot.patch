From f0a932baaf2cdeeae2a809b52ac57ae91557ef8a Mon Sep 17 00:00:00 2001
From: LordPsyan <lordpsyan@gmail.com>
Date: Fri, 28 Sep 2018 07:16:16 -0500
Subject: [PATCH] 2018_09_27-rate_xp_loot

---
 sql/LordPsyan-Patches/auth/auth.ratexploot.sql     |  11 +
 .../characters/characters.ratexploot.sql           |  13 +
 sql/LordPsyan-Patches/world/world.ratexploot.sql   |   5 +
 .../Database/Implementation/CharacterDatabase.cpp  |   9 +-
 .../Database/Implementation/CharacterDatabase.h    |  10 +-
 src/server/game/Accounts/RBAC.h                    |   4 +-
 src/server/game/Entities/Creature/GossipDef.cpp    |   4 +-
 src/server/game/Entities/Player/Player.cpp         |   6 +-
 src/server/game/Entities/Player/Player.h           |   9 +-
 src/server/game/Loot/Loot.cpp                      |   2 +-
 src/server/game/Loot/LootMgr.cpp                   |  10 +-
 src/server/game/Loot/LootMgr.h                     |   4 +-
 src/server/game/World/World.cpp                    |  42 ++-
 src/server/game/World/World.h                      |   8 +-
 src/server/scripts/Custom/custom_rates.cpp         | 320 +++++++++++++++++++++
 src/server/scripts/Custom/custom_script_loader.cpp |   6 +-
 src/server/worldserver/worldserver.conf.dist       |  43 +++
 17 files changed, 485 insertions(+), 21 deletions(-)
 create mode 100644 sql/LordPsyan-Patches/auth/auth.ratexploot.sql
 create mode 100644 sql/LordPsyan-Patches/characters/characters.ratexploot.sql
 create mode 100644 sql/LordPsyan-Patches/world/world.ratexploot.sql
 create mode 100644 src/server/scripts/Custom/custom_rates.cpp

diff --git a/sql/LordPsyan-Patches/auth/auth.ratexploot.sql b/sql/LordPsyan-Patches/auth/auth.ratexploot.sql
new file mode 100644
index 0000000000..9ce464e76d
--- /dev/null
+++ b/sql/LordPsyan-Patches/auth/auth.ratexploot.sql
@@ -0,0 +1,11 @@
+SET @RATE_PERM := '1300';
+
+DELETE FROM `rbac_permissions` WHERE `id` BETWEEN @RATE_PERM AND @RATE_PERM+1;
+INSERT INTO `rbac_permissions` (`id`,`name`) VALUES
+(@RATE_PERM+0,'rate xp'),
+(@RATE_PERM+1,'rate loot');
+
+DELETE FROM `rbac_linked_permissions` WHERE `linkedId` BETWEEN @RATE_PERM AND @RATE_PERM+1;
+INSERT INTO `rbac_linked_permissions` (`id`,`linkedId`) VALUES
+('199',@RATE_PERM+0), -- GM command .rate xp
+('199',@RATE_PERM+1); -- GM command .rate loot
diff --git a/sql/LordPsyan-Patches/characters/characters.ratexploot.sql b/sql/LordPsyan-Patches/characters/characters.ratexploot.sql
new file mode 100644
index 0000000000..7ee01af7ed
--- /dev/null
+++ b/sql/LordPsyan-Patches/characters/characters.ratexploot.sql
@@ -0,0 +1,13 @@
+DROP TABLE IF EXISTS `character_loot_rate`;
+CREATE TABLE `character_loot_rate` (
+  `guid` int(10) unsigned NOT NULL,
+  `loot_rate` int(10) unsigned NOT NULL DEFAULT '1',
+  PRIMARY KEY (`guid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player Loot Rate System';
+
+DROP TABLE IF EXISTS `character_xp_rate`;
+CREATE TABLE `character_xp_rate` (
+  `guid` int(10) UNSIGNED NOT NULL,
+  `xp_rate` int(10) UNSIGNED NOT NULL DEFAULT '1',
+  PRIMARY KEY (`guid`)
+) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Player XP Rate System';
diff --git a/sql/LordPsyan-Patches/world/world.ratexploot.sql b/sql/LordPsyan-Patches/world/world.ratexploot.sql
new file mode 100644
index 0000000000..0a408c705f
--- /dev/null
+++ b/sql/LordPsyan-Patches/world/world.ratexploot.sql
@@ -0,0 +1,5 @@
+SET @RATE_PERM := '1300';
+
+INSERT INTO `command`(`name`,`permission`,`help`) VALUES
+('rate xp',@RATE_PERM+0,'Syntax: .rate xp $value\r\nSets your XP multiplier to $value. If no parameter is provided, it will show your current XP rate.'),
+('rate loot',@RATE_PERM+1,'Syntax: .rate loot $value\r\nSets your loot multiplier to $value. If no parameter is provided, it will show your current loot rate. A $value of 0 means you won\'t be able to loot anything.');
diff --git a/src/server/database/Database/Implementation/CharacterDatabase.cpp b/src/server/database/Database/Implementation/CharacterDatabase.cpp
index 4582d88822..feaea16347 100644
--- a/src/server/database/Database/Implementation/CharacterDatabase.cpp
+++ b/src/server/database/Database/Implementation/CharacterDatabase.cpp
@@ -630,7 +630,14 @@ void CharacterDatabaseConnection::DoPrepareStatements()
     // 14
     // 15
     // 16
-    // 17
+    PrepareStatement(CHAR_INS_INDIVIDUAL_XP_RATE, "INSERT INTO character_xp_rate (guid, xp_rate) VALUES (?, ?)", CONNECTION_ASYNC);
+    PrepareStatement(CHAR_DEL_INDIVIDUAL_XP_RATE, "DELETE FROM character_xp_rate WHERE guid = ?", CONNECTION_ASYNC);
+    PrepareStatement(CHAR_SEL_INDIVIDUAL_XP_RATE, "SELECT xp_rate FROM character_xp_rate WHERE guid = ?", CONNECTION_SYNCH);
+    PrepareStatement(CHAR_UPD_INDIVIDUAL_XP_RATE, "UPDATE character_xp_rate SET xp_rate = ? WHERE guid = ?", CONNECTION_ASYNC);
+    PrepareStatement(CHAR_INS_INDIVIDUAL_LOOT_RATE, "INSERT INTO character_loot_rate (guid, loot_rate) VALUES (?, ?)", CONNECTION_ASYNC);
+    PrepareStatement(CHAR_DEL_INDIVIDUAL_LOOT_RATE, "DELETE FROM character_loot_rate WHERE guid = ?", CONNECTION_ASYNC);
+    PrepareStatement(CHAR_SEL_INDIVIDUAL_LOOT_RATE, "SELECT loot_rate FROM character_loot_rate WHERE guid = ?", CONNECTION_SYNCH);
+    PrepareStatement(CHAR_UPD_INDIVIDUAL_LOOT_RATE, "UPDATE character_loot_rate SET loot_rate = ? WHERE guid = ?", CONNECTION_ASYNC);
     // 18
     // 19
     // 20
diff --git a/src/server/database/Database/Implementation/CharacterDatabase.h b/src/server/database/Database/Implementation/CharacterDatabase.h
index 359f945d1b..328d930ac2 100644
--- a/src/server/database/Database/Implementation/CharacterDatabase.h
+++ b/src/server/database/Database/Implementation/CharacterDatabase.h
@@ -545,7 +545,15 @@ enum CharacterDatabaseStatements : uint32
     // 14
     // 15
     // 16
-    // 17
+    CHAR_INS_INDIVIDUAL_XP_RATE,
+    CHAR_DEL_INDIVIDUAL_XP_RATE,
+    CHAR_SEL_INDIVIDUAL_XP_RATE,
+    CHAR_UPD_INDIVIDUAL_XP_RATE,
+
+    CHAR_INS_INDIVIDUAL_LOOT_RATE,
+    CHAR_DEL_INDIVIDUAL_LOOT_RATE,
+    CHAR_SEL_INDIVIDUAL_LOOT_RATE,
+    CHAR_UPD_INDIVIDUAL_LOOT_RATE,
     // 18
     // 19
     // 20
diff --git a/src/server/game/Accounts/RBAC.h b/src/server/game/Accounts/RBAC.h
index f671cd0a25..d4985edaa8 100644
--- a/src/server/game/Accounts/RBAC.h
+++ b/src/server/game/Accounts/RBAC.h
@@ -776,7 +776,9 @@ enum RBACPermissions
     //
     // custom permissions 1000+
     // Prepatch by LordPsyan
-    // 01
+	RBAC_PERM_COMMAND_RATE                                   = 1200,
+	RBAC_PERM_COMMAND_RATE_XP                                = 1201,
+	RBAC_PERM_COMMAND_RATE_LOOT                              = 1202,
     // 02
     // 03
     // 04
diff --git a/src/server/game/Entities/Creature/GossipDef.cpp b/src/server/game/Entities/Creature/GossipDef.cpp
index 930444ed47..0c553b4cd1 100644
--- a/src/server/game/Entities/Creature/GossipDef.cpp
+++ b/src/server/game/Entities/Creature/GossipDef.cpp
@@ -474,7 +474,7 @@ void PlayerMenu::SendQuestGiverQuestDetails(Quest const* quest, ObjectGuid npcGU
         }
 
         data << uint32(quest->GetRewOrReqMoney());
-        data << uint32(quest->XPValue(_session->GetPlayer()) * sWorld->getRate(RATE_XP_QUEST));
+        data << uint32(quest->XPValue(_session->GetPlayer()) * sWorld->getRate(RATE_XP_QUEST) * _session->GetPlayer()->GetCustomXpRate());
     }
 
     // rewarded honor points. Multiply with 10 to satisfy client
@@ -588,7 +588,7 @@ void PlayerMenu::SendQuestGiverOfferReward(Quest const* quest, ObjectGuid npcGUI
     }
 
     data << uint32(quest->GetRewOrReqMoney());
-    data << uint32(quest->XPValue(_session->GetPlayer()) * sWorld->getRate(RATE_XP_QUEST));
+    data << uint32(quest->XPValue(_session->GetPlayer()) * sWorld->getRate(RATE_XP_QUEST) * _session->GetPlayer()->GetCustomXpRate());
 
     // rewarded honor points. Multiply with 10 to satisfy client
     data << uint32(10 * quest->CalculateHonorGain(_session->GetPlayer()->GetQuestLevel(quest)));
diff --git a/src/server/game/Entities/Player/Player.cpp b/src/server/game/Entities/Player/Player.cpp
index 467fb9f23b..1a49dae719 100644
--- a/src/server/game/Entities/Player/Player.cpp
+++ b/src/server/game/Entities/Player/Player.cpp
@@ -428,6 +428,9 @@ Player::Player(WorldSession* session): Unit(true)
 
     m_achievementMgr = new AchievementMgr(this);
     m_reputationMgr = new ReputationMgr(this);
+
+    m_CustomXpRate = 1;
+    m_CustomLootRate = 1;
 }
 
 Player::~Player()
@@ -6499,6 +6502,7 @@ void Player::CheckAreaExploreAndOutdoor()
                     XP = std::max(minScaledXP, XP);
                 }
 
+                XP *= GetCustomXpRate();
                 GiveXP(XP, nullptr);
                 SendExplorationExperience(areaId, XP);
             }
@@ -15177,7 +15181,7 @@ void Player::RewardQuest(Quest const* quest, uint32 reward, Object* questGiver,
     bool rewarded = IsQuestRewarded(quest_id) && !quest->IsDFQuest();
 
     // Not give XP in case already completed once repeatable quest
-    uint32 XP = rewarded ? 0 : uint32(quest->XPValue(this)*sWorld->getRate(RATE_XP_QUEST));
+    uint32 XP = rewarded ? 0 : uint32(quest->XPValue(this)*sWorld->getRate(RATE_XP_QUEST) * GetCustomXpRate());
 
     // handle SPELL_AURA_MOD_XP_QUEST_PCT auras
     XP *= GetTotalAuraMultiplier(SPELL_AURA_MOD_XP_QUEST_PCT);
diff --git a/src/server/game/Entities/Player/Player.h b/src/server/game/Entities/Player/Player.h
index f233596c7e..a169dc1ff8 100644
--- a/src/server/game/Entities/Player/Player.h
+++ b/src/server/game/Entities/Player/Player.h
@@ -2169,7 +2169,11 @@ class TC_GAME_API Player : public Unit, public GridObject<Player>
     // 14
     // 15
     // 16
-    // 17
+        void SetCustomXpRate(uint32 rate) { m_CustomXpRate = rate; }
+        uint32 GetCustomXpRate() const { return m_CustomXpRate; }
+
+        void SetCustomLootRate(uint32 rate) { m_CustomLootRate = rate; }
+        uint32 GetCustomLootRate() const { return m_CustomLootRate; }
     // 18
     // 19
     // 20
@@ -2524,7 +2528,8 @@ class TC_GAME_API Player : public Unit, public GridObject<Player>
         // 34
         // 35
         // 36
-        // 37
+        uint32 m_CustomXpRate;
+        uint32 m_CustomLootRate;
         // 38
         // 39
         // 40
diff --git a/src/server/game/Loot/Loot.cpp b/src/server/game/Loot/Loot.cpp
index c2cd2e9de5..034e066a2a 100644
--- a/src/server/game/Loot/Loot.cpp
+++ b/src/server/game/Loot/Loot.cpp
@@ -171,7 +171,7 @@ bool Loot::FillLoot(uint32 lootId, LootStore const& store, Player* lootOwner, bo
     items.reserve(MAX_NR_LOOT_ITEMS);
     quest_items.reserve(MAX_NR_QUEST_ITEMS);
 
-    tab->Process(*this, store.IsRatesAllowed(), lootMode);          // Processing is done there, callback via Loot::AddItem()
+    tab->Process(*this, store.IsRatesAllowed(), lootMode, 0, lootOwner->GetCustomLootRate());          // Processing is done there, callback via Loot::AddItem()
 
                                                                     // Setting access rights for group loot case
     Group* group = lootOwner->GetGroup();
diff --git a/src/server/game/Loot/LootMgr.cpp b/src/server/game/Loot/LootMgr.cpp
index 43b2d56166..78e18232ff 100644
--- a/src/server/game/Loot/LootMgr.cpp
+++ b/src/server/game/Loot/LootMgr.cpp
@@ -279,17 +279,17 @@ void LootStore::ReportNonExistingId(uint32 lootId, char const* ownerType, uint32
 
 // Checks if the entry (quest, non-quest, reference) takes it's chance (at loot generation)
 // RATE_DROP_ITEMS is no longer used for all types of entries
-bool LootStoreItem::Roll(bool rate) const
+bool LootStoreItem::Roll(bool rate, uint32 customRate) const
 {
     if (chance >= 100.0f)
         return true;
 
     if (reference > 0)                                   // reference case
-        return roll_chance_f(chance* (rate ? sWorld->getRate(RATE_DROP_ITEM_REFERENCED) : 1.0f));
+        return roll_chance_f(chance* (rate ? sWorld->getRate(RATE_DROP_ITEM_REFERENCED) * customRate : 1.0f));
 
     ItemTemplate const* pProto = sObjectMgr->GetItemTemplate(itemid);
 
-    float qualityModifier = pProto && rate ? sWorld->getRate(qualityToRate[pProto->Quality]) : 1.0f;
+    float qualityModifier = pProto && rate ? sWorld->getRate(qualityToRate[pProto->Quality]) * customRate : 1.0f;
 
     return roll_chance_f(chance*qualityModifier);
 }
@@ -560,7 +560,7 @@ void LootTemplate::CopyConditions(LootItem* li) const
 }
 
 // Rolls for every item in the template and adds the rolled items the the loot
-void LootTemplate::Process(Loot& loot, bool rate, uint16 lootMode, uint8 groupId) const
+void LootTemplate::Process(Loot& loot, bool rate, uint16 lootMode, uint8 groupId, uint32 customRate) const
 {
     if (groupId)                                            // Group reference uses own processing of the group
     {
@@ -581,7 +581,7 @@ void LootTemplate::Process(Loot& loot, bool rate, uint16 lootMode, uint8 groupId
         if (!(item->lootmode & lootMode))                       // Do not add if mode mismatch
             continue;
 
-        if (!item->Roll(rate))
+        if (!item->Roll(rate, customRate))
             continue;                                           // Bad luck for the entry
 
         if (item->reference > 0)                            // References processing
diff --git a/src/server/game/Loot/LootMgr.h b/src/server/game/Loot/LootMgr.h
index 22cbbd0943..f6c3bbce3a 100644
--- a/src/server/game/Loot/LootMgr.h
+++ b/src/server/game/Loot/LootMgr.h
@@ -51,7 +51,7 @@ struct TC_GAME_API LootStoreItem
         needs_quest(_needs_quest), groupid(_groupid), mincount(_mincount), maxcount(_maxcount)
          { }
 
-    bool Roll(bool rate) const;                             // Checks if the entry takes it's chance (at loot generation)
+    bool Roll(bool rate, uint32 customRate) const;                             // Checks if the entry takes it's chance (at loot generation)
     bool IsValid(LootStore const& store, uint32 entry) const;
                                                             // Checks correctness of values
 };
@@ -109,7 +109,7 @@ class TC_GAME_API LootTemplate
         // Adds an entry to the group (at loading stage)
         void AddEntry(LootStoreItem* item);
         // Rolls for every item in the template and adds the rolled items the the loot
-        void Process(Loot& loot, bool rate, uint16 lootMode, uint8 groupId = 0) const;
+        void Process(Loot& loot, bool rate, uint16 lootMode, uint8 groupId = 0, uint32 customRate = 1) const;
         void CopyConditions(ConditionContainer const& conditions);
         void CopyConditions(LootItem* li) const;
 
diff --git a/src/server/game/World/World.cpp b/src/server/game/World/World.cpp
index 82dbe507d3..fc51b1acf5 100644
--- a/src/server/game/World/World.cpp
+++ b/src/server/game/World/World.cpp
@@ -1541,7 +1541,47 @@ void World::LoadConfigSettings(bool reload)
     // 54
     // 55
     // 56
-    // 57
+    // Individual XP/loot rates
+    int sec = sConfigMgr->GetIntDefault("Player.XpRateSecurity", 0);
+    if (sec < SEC_PLAYER || sec > SEC_ADMINISTRATOR)
+    {
+        TC_LOG_INFO("server.loading", "Player.XpRateSecurity has invalid security `%i`, must be between `%i and `%i`, defaulting to 0 ...",
+            sec, SEC_PLAYER, SEC_ADMINISTRATOR);
+        m_int_configs[CONFIG_PLAYER_INDIVIDUAL_XP_RATE_SECURITY] = 0;
+    }
+    else
+        m_int_configs[CONFIG_PLAYER_INDIVIDUAL_XP_RATE_SECURITY] = sec;
+
+    sec = sConfigMgr->GetIntDefault("Player.LootRateSecurity", 0);
+    if (sec < SEC_PLAYER || sec > SEC_ADMINISTRATOR)
+    {
+        TC_LOG_INFO("server.loading", "Player.LootRateSecurity has invalid security `%i`, must be between `%i and `%i`, defaulting to 0 ...",
+            sec, SEC_PLAYER, SEC_ADMINISTRATOR);
+        m_int_configs[CONFIG_PLAYER_INDIVIDUAL_LOOT_RATE_SECURITY] = 0;
+    }
+    else
+        m_int_configs[CONFIG_PLAYER_INDIVIDUAL_LOOT_RATE_SECURITY] = sec;
+
+    int maxXpRate = sConfigMgr->GetIntDefault("Player.MaximumXpRate", 1);
+    if (maxXpRate < 1)
+    {
+        TC_LOG_INFO("server.loading", "Player.MaximumXpRate has too low value `%i`, defaulting to 1 ...", maxXpRate);
+        m_int_configs[CONFIG_PLAYER_MAXIMUM_INDIVIDUAL_XP_RATE] = 1;
+    }
+    else
+        m_int_configs[CONFIG_PLAYER_MAXIMUM_INDIVIDUAL_XP_RATE] = maxXpRate;
+
+    maxXpRate = sConfigMgr->GetIntDefault("Player.MaximumLootRate", 1);
+    if (maxXpRate < 1)
+    {
+        TC_LOG_INFO("server.loading", "Player.MaximumLootRate has too low value `%i`, defaulting to 1 ...", maxXpRate);
+        m_int_configs[CONFIG_PLAYER_MAXIMUM_INDIVIDUAL_LOOT_RATE] = 1;
+    }
+    else
+        m_int_configs[CONFIG_PLAYER_MAXIMUM_INDIVIDUAL_LOOT_RATE] = maxXpRate;
+
+    m_bool_configs[CONFIG_PLAYER_INDIVIDUAL_XP_RATE_SHOW_ON_LOGIN] = sConfigMgr->GetBoolDefault("Player.ShowXpRateOnLogin", true);
+    m_bool_configs[CONFIG_PLAYER_INDIVIDUAL_LOOT_RATE_SHOW_ON_LOGIN] = sConfigMgr->GetBoolDefault("Player.ShowLootRateOnLogin", true);
     // 58
     // 59
     // 60
diff --git a/src/server/game/World/World.h b/src/server/game/World/World.h
index c0cb58fc77..65046c7afb 100644
--- a/src/server/game/World/World.h
+++ b/src/server/game/World/World.h
@@ -179,7 +179,8 @@ enum WorldBoolConfigs
     // 14
     // 15
     // 16
-    // 17
+    CONFIG_PLAYER_INDIVIDUAL_XP_RATE_SHOW_ON_LOGIN,
+    CONFIG_PLAYER_INDIVIDUAL_LOOT_RATE_SHOW_ON_LOGIN,
     // 18
     // 19
     // 20
@@ -492,7 +493,10 @@ enum WorldIntConfigs
     // 90
     // 91
     // 92
-    // 93
+    CONFIG_PLAYER_INDIVIDUAL_XP_RATE_SECURITY,
+    CONFIG_PLAYER_INDIVIDUAL_LOOT_RATE_SECURITY ,
+    CONFIG_PLAYER_MAXIMUM_INDIVIDUAL_XP_RATE,
+    CONFIG_PLAYER_MAXIMUM_INDIVIDUAL_LOOT_RATE,
     // 94
     // 95
     // 96
diff --git a/src/server/scripts/Custom/custom_rates.cpp b/src/server/scripts/Custom/custom_rates.cpp
new file mode 100644
index 0000000000..128f1135ab
--- /dev/null
+++ b/src/server/scripts/Custom/custom_rates.cpp
@@ -0,0 +1,320 @@
+#include "ScriptMgr.h"
+#include "Chat.h"
+#include "Language.h"
+#include "World.h"
+#include "CharacterDatabase.h"
+#include "WorldSession.h"
+#include "RBAC.h"
+#include "DatabaseEnv.h"
+#include "DBCStores.h"
+
+class CustomRates
+{
+private:
+	static int32 GetRateFromDB(const Player *player, CharacterDatabaseStatements statement)
+	{
+		PreparedStatement *stmt = CharacterDatabase.GetPreparedStatement(statement);
+		stmt->setUInt32(0, player->GetGUID().GetCounter());
+		PreparedQueryResult result = CharacterDatabase.Query(stmt);
+
+		if (result)
+			return static_cast<int32>((*result)[0].GetUInt32());
+
+		return -1;
+	}
+
+	static void SaveRateToDB(const Player *player, uint32 rate, bool update, CharacterDatabaseStatements uStmt, CharacterDatabaseStatements iStmt)
+	{
+		if (update)
+		{
+			PreparedStatement *stmt = CharacterDatabase.GetPreparedStatement(uStmt);
+			stmt->setUInt32(0, rate);
+			stmt->setUInt32(1, player->GetGUID().GetCounter());
+			CharacterDatabase.Execute(stmt);
+		}
+		else
+		{
+			PreparedStatement *stmt = CharacterDatabase.GetPreparedStatement(iStmt);
+			stmt->setUInt32(0, player->GetGUID().GetCounter());
+			stmt->setUInt32(1, rate);
+			CharacterDatabase.Execute(stmt);
+		}
+	}
+public:
+	static void DeleteRateFromDB(ObjectGuid guid, CharacterDatabaseStatements statement)
+	{
+		PreparedStatement *stmt = CharacterDatabase.GetPreparedStatement(statement);
+		stmt->setUInt32(0, guid.GetCounter());
+		CharacterDatabase.Execute(stmt);
+	}
+
+	static int32 GetXpRateFromDB(const Player *player)
+	{
+		return GetRateFromDB(player, CHAR_SEL_INDIVIDUAL_XP_RATE);
+	}
+
+	static int32 GetLootRateFromDB(const Player *player)
+	{
+		return GetRateFromDB(player, CHAR_SEL_INDIVIDUAL_LOOT_RATE);
+	}
+
+	static void SaveXpRateToDB(const Player *player, uint32 rate, bool update)
+	{
+		SaveRateToDB(player, rate, update, CHAR_UPD_INDIVIDUAL_XP_RATE, CHAR_INS_INDIVIDUAL_XP_RATE);
+	}
+
+	static void SaveLootRateToDB(const Player *player, uint32 rate, bool update)
+	{
+		SaveRateToDB(player, rate, update, CHAR_UPD_INDIVIDUAL_LOOT_RATE, CHAR_INS_INDIVIDUAL_LOOT_RATE);
+	}
+};
+
+class add_del_rates : public PlayerScript
+{
+public:
+	add_del_rates() : PlayerScript("add_del_rates")
+	{
+	}
+
+	void OnDelete(ObjectGuid guid)
+	{
+		CustomRates::DeleteRateFromDB(guid, CHAR_DEL_INDIVIDUAL_XP_RATE);
+		CustomRates::DeleteRateFromDB(guid, CHAR_DEL_INDIVIDUAL_LOOT_RATE);
+	}
+
+	void OnLogin(Player *player)
+	{
+		// show custom XP rate on login
+		int32 rate = CustomRates::GetXpRateFromDB(player);
+
+		if (rate != -1 && player->getLevel() != sWorld->getIntConfig(CONFIG_MAX_PLAYER_LEVEL))
+		{
+			uint32 uRate = static_cast<uint32>(rate);
+			player->SetCustomXpRate(uRate);
+
+			if (sWorld->getBoolConfig(CONFIG_PLAYER_INDIVIDUAL_XP_RATE_SHOW_ON_LOGIN))
+			{
+				if (uRate)
+					ChatHandler(player->GetSession()).PSendSysMessage("|CFF7BBEF7[Custom Rates]|r: Your XP rate was set to %u.", uRate);
+				else
+					ChatHandler(player->GetSession()).SendSysMessage("|CFF7BBEF7[Custom Rates]|r: Your XP rate was set to 0. You won't gain any XP anymore.");
+			}
+		}
+
+		// show custom loot rate on login
+		rate = CustomRates::GetLootRateFromDB(player);
+		if (rate != -1)
+		{
+			uint32 uRate = static_cast<uint32>(rate);
+			player->SetCustomLootRate(uRate);
+
+			if (sWorld->getBoolConfig(CONFIG_PLAYER_INDIVIDUAL_LOOT_RATE_SHOW_ON_LOGIN))
+			{
+				if (uRate)
+					ChatHandler(player->GetSession()).PSendSysMessage("|CFF7BBEF7[Custom Rates]|r: Your loot rate was set to %u.", uRate);
+				else
+					ChatHandler(player->GetSession()).SendSysMessage("|CFF7BBEF7[Custom Rates]|r: Your loot rate was set to 0. You won't be able to loot anything.");
+			}
+		}
+	}
+};
+
+class custom_rate_commands : public CommandScript
+{
+private:
+	
+public:
+	custom_rate_commands() : CommandScript("custom_rate_commands")
+	{
+	}
+
+	std::vector<ChatCommand> GetCommands() const override
+	{
+		static std::vector<ChatCommand> rateCommandTable =
+		{
+			{ "xp",      rbac::RBAC_PERM_COMMAND_RATE_XP,  false, &HandleRateXpCommand,       "" },
+			{ "loot",      rbac::RBAC_PERM_COMMAND_RATE_LOOT,  false, &HandleRateLootCommand, "" },
+		};
+
+		static std::vector<ChatCommand> commandTable =
+		{
+			{ "rate",      rbac::RBAC_PERM_COMMAND_RATE,  false, NULL, "", rateCommandTable },
+
+		};
+
+		return commandTable;
+	}
+
+	static bool HandleRateXpCommand(ChatHandler *handler, const char *args)
+	{
+		// take a pointer to the player who uses the command
+		Player *me = handler->GetSession() ? handler->GetSession()->GetPlayer() : NULL;
+		if (!me)
+			return false;
+
+		// already at max level, no point in using the command at all
+		if (me->getLevel() == sWorld->getIntConfig(CONFIG_MAX_PLAYER_LEVEL))
+		{
+			handler->SendSysMessage("|CFF7BBEF7[Custom Rates]|r: You are already at maximum level.");
+			return true;
+		}
+
+		// no arguments, show current XP rate
+		if (!*args)
+		{
+			handler->PSendSysMessage("|CFF7BBEF7[Custom Rates]|r: Your current XP rate is %u.", me->GetCustomXpRate());
+			return true;
+		}
+
+		// first, check if I can use the command
+		if (me->GetSession()->GetSecurity() < (int)sWorld->getIntConfig(CONFIG_PLAYER_INDIVIDUAL_XP_RATE_SECURITY))
+		{
+			handler->SendSysMessage(LANG_YOURS_SECURITY_IS_LOW);
+            handler->SetSentErrorMessage(true);
+            return false;
+		}
+
+		// take a pointer to player's selection
+		Player *target = handler->getSelectedPlayer();
+		if (!target || !target->GetSession())
+		{
+            handler->SendSysMessage(LANG_NO_CHAR_SELECTED);
+            handler->SetSentErrorMessage(true);
+            return false;
+        }
+
+		// extract value
+		int rate = atoi((char *)args);
+		int maxRate = sWorld->getIntConfig(CONFIG_PLAYER_MAXIMUM_INDIVIDUAL_XP_RATE);
+		if (rate < 0 || rate > maxRate)
+		{
+			handler->PSendSysMessage("|CFF7BBEF7[Custom Rates]|r: Invalid rate specified, must be in interval [0,%i].", maxRate);
+			handler->SetSentErrorMessage(true);
+			return false;
+		}
+
+		// take a pointer to the player we need to set xp rate to
+		// can be either player itself, or his selection, if
+		// selection security is lower than his security
+		Player *player = NULL;
+		if (target == me)
+			player = me;
+		else
+		{
+			if (me->GetSession()->GetSecurity() > target->GetSession()->GetSecurity())
+				player = target;
+			else
+			{
+				handler->SendSysMessage(LANG_YOURS_SECURITY_IS_LOW);
+				handler->SetSentErrorMessage(true);
+				return false;
+			}
+		}
+
+		// set player custom XP rate and save it in DB for later use
+		uint32 uRate = static_cast<uint32>(rate);
+		player->SetCustomXpRate(uRate);
+		int32 rateFromDB = CustomRates::GetXpRateFromDB(player);
+		if (rateFromDB == -1)
+			CustomRates::SaveXpRateToDB(player, uRate, false);
+		else
+			CustomRates::SaveXpRateToDB(player, uRate, true);
+
+		// show a message indicating custom XP rate change
+		if (player == me)
+			handler->PSendSysMessage("|CFF7BBEF7[Custom Rates]|r: You have set your XP rate to %u.", uRate);
+		else
+		{
+			handler->PSendSysMessage("|CFF7BBEF7[Custom Rates]|r: You have set %s's XP rate to %u.", handler->GetNameLink(player).c_str(), uRate);
+			ChatHandler(player->GetSession()).PSendSysMessage("|CFF7BBEF7[Custom Rates]|r: %s has set your XP rate to %u.", handler->GetNameLink().c_str(), uRate);
+		}
+
+		return true;
+	}
+
+	static bool HandleRateLootCommand(ChatHandler *handler, const char *args)
+	{
+		// take a pointer to the player who uses the command
+		Player *me = handler->GetSession() ? handler->GetSession()->GetPlayer() : NULL;
+		if (!me)
+			return false;
+
+		// no arguments, show current loot rate
+		if (!*args)
+		{
+			handler->PSendSysMessage("|CFF7BBEF7[Custom Rates]|r: Your current loot rate is %u.", me->GetCustomLootRate());
+			return true;
+		}
+
+		// first, check if I can use the command
+		if (me->GetSession()->GetSecurity() < (int)sWorld->getIntConfig(CONFIG_PLAYER_INDIVIDUAL_LOOT_RATE_SECURITY))
+		{
+			handler->SendSysMessage(LANG_YOURS_SECURITY_IS_LOW);
+            handler->SetSentErrorMessage(true);
+            return false;
+		}
+
+		// take a pointer to player's selection
+		Player *target = handler->getSelectedPlayer();
+		if (!target || !target->GetSession())
+		{
+            handler->SendSysMessage(LANG_NO_CHAR_SELECTED);
+            handler->SetSentErrorMessage(true);
+            return false;
+        }
+
+		// extract value
+		int rate = atoi((char *)args);
+		int maxRate = sWorld->getIntConfig(CONFIG_PLAYER_MAXIMUM_INDIVIDUAL_LOOT_RATE);
+		if (rate < 0 || rate > maxRate)
+		{
+			handler->PSendSysMessage("|CFF7BBEF7[Custom Rates]|r: Invalid rate specified, must be in interval [0,%i].", maxRate);
+			handler->SetSentErrorMessage(true);
+			return false;
+		}
+
+		// take a pointer to the player we need to set xp rate to
+		// can be either player itself, or his selection, if
+		// selection security is lower than his security
+		Player *player = NULL;
+		if (target == me)
+			player = me;
+		else
+		{
+			if (me->GetSession()->GetSecurity() > target->GetSession()->GetSecurity())
+				player = target;
+			else
+			{
+				handler->SendSysMessage(LANG_YOURS_SECURITY_IS_LOW);
+				handler->SetSentErrorMessage(true);
+				return false;
+			}
+		}
+
+		// set player custom loot rate and save it in DB for later use
+		uint32 uRate = static_cast<uint32>(rate);
+		player->SetCustomLootRate(uRate);
+		int32 rateFromDB = CustomRates::GetLootRateFromDB(player);
+		if (rateFromDB == -1)
+			CustomRates::SaveLootRateToDB(player, uRate, false);
+		else
+			CustomRates::SaveLootRateToDB(player, uRate, true);
+
+		// show a message indicating custom XP rate change
+		if (player == me)
+			handler->PSendSysMessage("|CFF7BBEF7[Custom Rates]|r: You have set your loot rate to %u.", uRate);
+		else
+		{
+			handler->PSendSysMessage("|CFF7BBEF7[Custom Rates]|r: You have set %s's loot rate to %u.", handler->GetNameLink(player).c_str(), uRate);
+			ChatHandler(player->GetSession()).PSendSysMessage("|CFF7BBEF7[Custom Rates]|r: %s has set your loot rate to %u.", handler->GetNameLink().c_str(), uRate);
+		}
+
+		return true;
+	}
+};
+
+void Add_SC_Custom_Rates()
+{
+	new add_del_rates();
+	new custom_rate_commands();
+}
\ No newline at end of file
diff --git a/src/server/scripts/Custom/custom_script_loader.cpp b/src/server/scripts/Custom/custom_script_loader.cpp
index 5412cf1942..3dacae6612 100644
--- a/src/server/scripts/Custom/custom_script_loader.cpp
+++ b/src/server/scripts/Custom/custom_script_loader.cpp
@@ -167,7 +167,8 @@
 // start149
 // start150
 // start151
-// start152
+// Rate XP Loot
+void Add_SC_Custom_Rates();
 // start153
 // start154
 // start155
@@ -372,7 +373,8 @@ void AddCustomScripts()
 // end149
 // end150
 // end151
-// end152
+// Rate XP Loot
+    Add_SC_Custom_Rates();
 // end153
 // end154
 // end155
diff --git a/src/server/worldserver/worldserver.conf.dist b/src/server/worldserver/worldserver.conf.dist
index 6ee9e3158c..04efd2e279 100644
--- a/src/server/worldserver/worldserver.conf.dist
+++ b/src/server/worldserver/worldserver.conf.dist
@@ -4015,6 +4015,49 @@ Metric.OverallStatusInterval = 1
 
 #
 ###################################################################################################
+ 
+###################################################################################################
+# INDIVIDUAL PLAYER XP RATES
+#
+#    Player.XpRateSecurity
+#    Player.LootRateSecurity
+#        Description: Minimum security an account must have in order to
+#                     use .rate xp / .rate loot command
+#        Values     : 0 (player account)
+#                     1 (moderator account)
+#                     2 (gamemaster account)
+#                     3 (administrator account)
+#        Default    : 0 (every player can use the commands)
+#        Remarks    : Higher security accounts may set xp/loot rate to
+#                     lower security level accounts.
+#
+
+Player.XpRateSecurity = 0
+Player.LootRateSecurity = 0
+
+#    Player.MaximumXpRate
+#    Player.MaximumLootRate
+#        Description: Maximum individual XP / loot rate
+#        Values     : n (integer, may set xp / loot rate in range [1,n]
+#        Default    : 10
+#
+
+Player.MaximumXpRate = 10
+Player.MaximumLootRate = 10
+
+#    Player.ShowXpRateOnLogin
+#    Player.ShowLootRateOnLogin
+#        Description: Shows current XP / loot rate to player on login
+#        Values     : 0 - don't show
+#                   : 1 - show
+#        Default    : 1
+#
+
+Player.ShowXpRateOnLogin = 1
+Player.ShowLootRateOnLogin = 1
+
+#
+###################################################################################################
 
 #
 # Prepatch by LordPsyan.
-- 
2.11.0

